/**
 * Generated by Verge3D Puzzles v.2.9.1
 * Tue Dec 11 2018 20:15:12 GMT+0100 (Mitteleurop√§ische Normalzeit)
 * Do not edit this file - your changes may get overridden when Puzzles are saved.
 * Refer to https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for information on how to add your own JavaScript to Verge3D apps.
 */

"use strict";

(function() {

// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

PL.legacyMode = false;

PL.execInitPuzzles = function() {

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }
    
    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}
var TopMaterialChange, LampMaterialChange, TopMaterials, CouchMatChange, LampMaterials, CouchMaterials, BottomMaterialChange, TableMaterialChange, BottomMaterials, Couch2MaterialChange, TableMaterials, Couch2Materials, ChairframeMaterialChange, CountertopMaterialChange, CabinetMaterialChange, ChairframeMaterials, CabinetMaterials, CountertopMaterials, ChairseatMaterialChange, Cabinet2MaterialChange, FloorMaterialChange, Chairseatmaterials, Cabinet2Materials, CarpetMaterialChange, FloorMaterials, CarpetMaterials, CouchMaterialChange;


// brightnessContrast puzzle
function brightnessContrast(brightness, contrast) {
    appInstance.enablePostprocessing([{
        type: 'brightnessContrast',
        brightness: brightness,
        contrast: contrast
    }]);
}



// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = typeof _pGlob != "undefined";
    objFound = runTime ? _pGlob.objCache[objName] : null;
    if (objFound && objFound.name == objName)
        return objFound;
    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime)
                _pGlob.objCache[objName] = objFound;
        }
    });
    return objFound;
}

// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type != "Scene" && obj.type != "AmbientLight" &&
            obj.name != "" && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}

// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}

function swizzleValueSign(newAxis, value) {
    newAxis = newAxis.toLowerCase();

    if (newAxis == 'z') {
        if (typeof value == 'number')
            return -value
        else if (typeof value == 'string' && value != '' && value != "''" && value != '""')
            return String(-Number(value));
        else
            return value;
    } else
        return value;
}

function swizzleVec3(vec) {

    var dest = []

    dest[0] = vec[0];
    dest[1] = vec[2];
    dest[2] = swizzleValueSign('z', vec[1])

    return dest;
}


// tweenCamera puzzle
function tweenCamera(posObjName, targetObjName, duration) {
    if (!targetObjName)
        return;
    if (posObjName)
        var posObj = getObjectByName(posObjName);
    else
        var posObj = appInstance.camera;
    var targetObj = getObjectByName(targetObjName);
    if (!posObj || !targetObj)
        return;

    var wPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    var wTarget = targetObj.getWorldPosition(_pGlob.vec3Tmp2);

    if (appInstance.controls && appInstance.controls.tween) { // orbit camera
        if (!appInstance.controls.inTween)
            appInstance.controls.tween(wPos, wTarget, duration);
    } else { // TODO flying and static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(wPos);
        }
        appInstance.camera.position.copy(wPos);
        appInstance.camera.lookAt(wTarget);
    }
}



// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart) {

    var elem = appInstance.container;
    elem.addEventListener(eventType, pickListener);
    if (eventType == "mousedown") {
        var touchEventName = mouseDownUseTouchStart ? "touchstart" : "touchend";
        elem.addEventListener(touchEventName, pickListener);
    }

    var raycaster = new v3d.Raycaster();
    var coords = new v3d.Vector2();
    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        coords.x = xNorm * 2 - 1;
        coords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(coords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        if (intersects.length > 0) {
            var obj = intersects[0].object;
            callback(obj, event);
        } else {
            callback(null, event);
        }
    }
}

// utility function used by the whenDraggedOver puzzles
function fireObjectPickingCallbacks(objName, source, index, cbParam) {
    for (var i = 0; i < source.length; i++) {
        var cb = source[i];
        if (objectsIncludeObj([cb[0]], objName)) {
            cb[index](cbParam);
        }
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenClicked puzzle
initObjectPicking(function(obj) {

    // save the object for the pickedObject block
    _pGlob.pickedObject = obj ? getPickedObjectName(obj) : '';

    _pGlob.objClickCallbacks.forEach(function(el) {
        var isPicked = obj && objectsIncludeObj(el.objNames, getPickedObjectName(obj));
        el.callbacks[isPicked ? 0 : 1]();
    });
}, 'mousedown');



// whenClicked puzzle
function registerOnClick(objNames, cbDo, cbIfMissedDo) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });
    _pGlob.objClickCallbacks.push({
        objNames: objNamesFiltered,
        callbacks: [cbDo, cbIfMissedDo]
    });
}



// assignMaterial puzzle
function assignMat(objNames, matName) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames || !matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj)
            obj.material = mat;
    }
}


function TopNext() {
  TopMaterialChange = TopMaterialChange + 1;
  assignMat("kitchen.top", TopMaterials[TopMaterialChange % TopMaterials.length]);
}
appInstance.ExternalInterface["TopNext"] = TopNext;


function LampNext() {
  LampMaterialChange = LampMaterialChange + 1;
  assignMat("dining.lamp.outter", LampMaterials[LampMaterialChange % LampMaterials.length]);
}
appInstance.ExternalInterface["LampNext"] = LampNext;


function CouchNext3() {
  CouchMatChange = CouchMatChange + 1;
  assignMat("living.sofa.large", CouchMaterials[CouchMatChange % CouchMaterials.length]);
}
appInstance.ExternalInterface["CouchNext3"] = CouchNext3;


function TopPrevious() {
  TopMaterialChange = TopMaterialChange - 1;
  assignMat("kitchen.top", TopMaterials[TopMaterialChange % TopMaterials.length]);
}
appInstance.ExternalInterface["TopPrevious"] = TopPrevious;


function CouchNext() {
  CouchMaterialChange = CouchMaterialChange + 1;
  assignMat("living.sofa.large", CouchMaterials[CouchMaterialChange % CouchMaterials.length]);
}
appInstance.ExternalInterface["CouchNext"] = CouchNext;


function LampPrevious() {
  LampMaterialChange = LampMaterialChange - 1;
  assignMat("dining.lamp.outter", LampMaterials[LampMaterialChange % LampMaterials.length]);
}
appInstance.ExternalInterface["LampPrevious"] = LampPrevious;



// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// whenHovered puzzle
initObjectPicking(function(obj) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = obj ? getPickedObjectName(obj) : "";

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverCallbacks.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1]();
        }
    });

    _pGlob.objHoverCallbacks.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0]();
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove');



// whenHovered puzzle
function registerOnHover(objNames, callback_over, callback_out) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    _pGlob.objHoverCallbacks.push({
        objNames: objNamesFiltered,
        callbacks: [callback_over, callback_out]
    });
}


function CouchPrevious3() {
  CouchMatChange = CouchMatChange - 1;
  assignMat("living.sofa.large", CouchMaterials[CouchMatChange % CouchMaterials.length]);
}
appInstance.ExternalInterface["CouchPrevious3"] = CouchPrevious3;


function BottomNext() {
  BottomMaterialChange = BottomMaterialChange + 1;
  assignMat("kitchen.bottom", BottomMaterials[BottomMaterialChange % BottomMaterials.length]);
}
appInstance.ExternalInterface["BottomNext"] = BottomNext;


function CouchPrevious() {
  CouchMaterialChange = CouchMaterialChange - 1;
  assignMat("living.sofa.large", CouchMaterials[CouchMaterialChange % CouchMaterials.length]);
}
appInstance.ExternalInterface["CouchPrevious"] = CouchPrevious;


function TableNext() {
  TableMaterialChange = TableMaterialChange + 1;
  assignMat("dining.table", TableMaterials[TableMaterialChange % TableMaterials.length]);
}
appInstance.ExternalInterface["TableNext"] = TableNext;


function Couch2Next() {
  Couch2MaterialChange = Couch2MaterialChange + 1;
  assignMat("living.sofa.small", Couch2Materials[Couch2MaterialChange % Couch2Materials.length]);
}
appInstance.ExternalInterface["Couch2Next"] = Couch2Next;


function BottomPrevious() {
  BottomMaterialChange = BottomMaterialChange - 1;
  assignMat("kitchen.bottom", BottomMaterials[BottomMaterialChange % BottomMaterials.length]);
}
appInstance.ExternalInterface["BottomPrevious"] = BottomPrevious;


function TablePrevious() {
  TableMaterialChange = TableMaterialChange - 1;
  assignMat("dining.table", TableMaterials[TableMaterialChange % TableMaterials.length]);
}
appInstance.ExternalInterface["TablePrevious"] = TablePrevious;


function Couch2Previous() {
  Couch2MaterialChange = Couch2MaterialChange - 1;
  assignMat("living.sofa.small", Couch2Materials[Couch2MaterialChange % Couch2Materials.length]);
}
appInstance.ExternalInterface["Couch2Previous"] = Couch2Previous;


function ChairframeNext() {
  ChairframeMaterialChange = ChairframeMaterialChange + 1;
  assignMat("dining.chair.frame", ChairframeMaterials[ChairframeMaterialChange % ChairframeMaterials.length]);
}
appInstance.ExternalInterface["ChairframeNext"] = ChairframeNext;


function CountertopNext() {
  CountertopMaterialChange = CountertopMaterialChange + 1;
  assignMat("kitchen.countertop", CountertopMaterials[CountertopMaterialChange % CountertopMaterials.length]);
}
appInstance.ExternalInterface["CountertopNext"] = CountertopNext;


function CabinetNext() {
  CabinetMaterialChange = CabinetMaterialChange + 1;
  assignMat("living.cabinet.inner", CabinetMaterials[CabinetMaterialChange % CabinetMaterials.length]);
  tweenCamera("Empty.Cabinet.Position", "Empty.Cabinet.Direction", 2);
}
appInstance.ExternalInterface["CabinetNext"] = CabinetNext;


function ChairframePrevious() {
  ChairframeMaterialChange = ChairframeMaterialChange - 1;
  assignMat("dining.chair.frame", ChairframeMaterials[ChairframeMaterialChange % ChairframeMaterials.length]);
}
appInstance.ExternalInterface["ChairframePrevious"] = ChairframePrevious;


function CabinetPrevious() {
  CabinetMaterialChange = CabinetMaterialChange - 1;
  assignMat("living.cabinet.inner", CabinetMaterials[CabinetMaterialChange % CabinetMaterials.length]);
  tweenCamera("Empty.Cabinet.Position", "Empty.Cabinet.Direction", 2);
}
appInstance.ExternalInterface["CabinetPrevious"] = CabinetPrevious;


function CountertopPrevious() {
  CountertopMaterialChange = CountertopMaterialChange - 1;
  assignMat("kitchen.countertop", CountertopMaterials[CountertopMaterialChange % CountertopMaterials.length]);
}
appInstance.ExternalInterface["CountertopPrevious"] = CountertopPrevious;


function ChairseatNext() {
  ChairseatMaterialChange = ChairseatMaterialChange + 1;
  assignMat("dining.chair.seat", Chairseatmaterials[ChairseatMaterialChange % Chairseatmaterials.length]);
}
appInstance.ExternalInterface["ChairseatNext"] = ChairseatNext;


function Cabinet2Next() {
  Cabinet2MaterialChange = Cabinet2MaterialChange + 1;
  assignMat("living.cabinet.outter", Cabinet2Materials[Cabinet2MaterialChange % Cabinet2Materials.length]);
  tweenCamera("Empty.Cabinet.Position", "Empty.Cabinet.Direction", 2);
}
appInstance.ExternalInterface["Cabinet2Next"] = Cabinet2Next;


function FloorNext() {
  FloorMaterialChange = FloorMaterialChange + 1;
  assignMat("floor", FloorMaterials[FloorMaterialChange % FloorMaterials.length]);
}
appInstance.ExternalInterface["FloorNext"] = FloorNext;


function Cabinet2Previous() {
  Cabinet2MaterialChange = Cabinet2MaterialChange - 1;
  assignMat("living.cabinet.outter", Cabinet2Materials[Cabinet2MaterialChange % Cabinet2Materials.length]);
  tweenCamera("Empty.Cabinet.Position", "Empty.Cabinet.Direction", 2);
}
appInstance.ExternalInterface["Cabinet2Previous"] = Cabinet2Previous;


function ChairseatPrevious() {
  ChairseatMaterialChange = ChairseatMaterialChange + 1;
  assignMat("dining.chair.seat", Chairseatmaterials[ChairseatMaterialChange % Chairseatmaterials.length]);
}
appInstance.ExternalInterface["ChairseatPrevious"] = ChairseatPrevious;


function FloorPrevious() {
  FloorMaterialChange = FloorMaterialChange - 1;
  assignMat("floor", FloorMaterials[FloorMaterialChange % FloorMaterials.length]);
}
appInstance.ExternalInterface["FloorPrevious"] = FloorPrevious;


function CarpetNext() {
  CarpetMaterialChange = CarpetMaterialChange + 1;
  assignMat("living.carpet", CarpetMaterials[CarpetMaterialChange % CarpetMaterials.length]);
}
appInstance.ExternalInterface["CarpetNext"] = CarpetNext;


function CarpetPrevious() {
  CarpetMaterialChange = CarpetMaterialChange - 1;
  assignMat("living.carpet", CarpetMaterials[CarpetMaterialChange % CarpetMaterials.length]);
}
appInstance.ExternalInterface["CarpetPrevious"] = CarpetPrevious;


function flyLiving() {
  tweenCamera("Empty.Living.Position", "Empty.Living.Direction", 2);
}
appInstance.ExternalInterface["flyLiving"] = flyLiving;


function flyDining() {
  tweenCamera("Empty.Dining.Position", "Empty.Dining.Direction", 2);
}
appInstance.ExternalInterface["flyDining"] = flyDining;


function flyKitchen() {
  tweenCamera("Empty.Kitchen.Position", "Empty.Kitchen.Direction", 2);
}
appInstance.ExternalInterface["flyKitchen"] = flyKitchen;


function flyMisc() {
  tweenCamera("Empty.Floor.Position", "Empty.Floor.Direction", 2);
}
appInstance.ExternalInterface["flyMisc"] = flyMisc;



brightnessContrast(0.04, 0.1);

TopMaterialChange = 400;

CouchMaterialChange = 500;

registerOnClick("living.sofa.large", function() {
  tweenCamera("Empty.Living.Position", "Empty.Living.Direction", 2);
  getJSFunction('showLiving')();
}, function() {});

LampMaterialChange = 400;

TopMaterials = ["kitchen.c.white", "kitchen.c.black", "kitchen.c.wood.dark", "kitchen.c.wood.light"];

CouchMatChange = 500;

LampMaterials = ["dining.lamp.black", "dining.lamp.blue", "dining.lamp.green", "dining.lamp.red"];

registerOnHover("kitchen.top", function() {
  outline("kitchen.top", "ENABLE");
}, function() {
  outline("kitchen.top", "DISABLE");
});

registerOnHover("dining.lamp.outter", function() {
  outline("dining.lamp.outter", "ENABLE");
}, function() {
  outline("dining.lamp.outter", "DISABLE");
});

registerOnHover("living.sofa.large", function() {
  outline("living.sofa.large", "ENABLE");
}, function() {
  outline("living.sofa.large", "DISABLE");
});

CouchMaterials = ["living.couch.black", "living.couch.blue", "living.couch.red", "living.couch.white", "living.couch.grey"];

BottomMaterialChange = 400;

registerOnClick("dining.lamp.outter", function() {
  tweenCamera("Empty.Dining.Position", "Empty.Dining.Direction", 2);
  getJSFunction('showDining')();
}, function() {});

registerOnClick("kitchen.top", function() {
  tweenCamera("Empty.Kitchen.Position", "Empty.Kitchen.Direction", 2);
  getJSFunction('showKitchen')();
}, function() {});

TableMaterialChange = 400;

BottomMaterials = ["kitchen.c.white", "kitchen.c.black", "kitchen.c.wood.dark", "kitchen.c.wood.light"];

registerOnHover("dining.chair.frame", function() {
  outline("dining.chair.frame", "ENABLE");
}, function() {
  outline("dining.chair.frame", "DISABLE");
});

registerOnHover("living.sofa.small", function() {
  outline("living.sofa.small", "ENABLE");
}, function() {
  outline("living.sofa.small", "DISABLE");
});

Couch2MaterialChange = 500;

registerOnHover("kitchen.countertop", function() {
  outline("kitchen.countertop", "ENABLE");
}, function() {
  outline("kitchen.countertop", "DISABLE");
});

registerOnClick("dining.chair.frame", function() {
  tweenCamera("Empty.Dining.Position", "Empty.Dining.Direction", 2);
  getJSFunction('showDining')();
}, function() {});

TableMaterials = ["wood.light", "wood.dark"];

registerOnClick("kitchen.countertop", function() {
  tweenCamera("Empty.Kitchen.Position", "Empty.Kitchen.Direction", 2);
  getJSFunction('showKitchen')();
}, function() {});

registerOnClick("living.sofa.small", function() {
  tweenCamera("Empty.Living.Position", "Empty.Living.Direction", 2);
  getJSFunction('showLiving')();
}, function() {});

registerOnHover("dining.chair.seat", function() {
  outline("dining.chair.seat", "ENABLE");
}, function() {
  outline("dining.chair.seat", "DISABLE");
});

Couch2Materials = ["living.couch.black", "living.couch.blue", "living.couch.red", "living.couch.white", "living.couch.grey"];

registerOnHover("kitchen.bottom", function() {
  outline("kitchen.bottom", "ENABLE");
}, function() {
  outline("kitchen.bottom", "DISABLE");
});

registerOnHover("living.carpet", function() {
  outline("living.carpet", "ENABLE");
}, function() {
  outline("living.carpet", "DISABLE");
});

ChairframeMaterialChange = 400;

registerOnClick("dining.chair.seat", function() {
  tweenCamera("Empty.Dining.Position", "Empty.Dining.Direction", 2);
  getJSFunction('showDining')();
}, function() {});

CountertopMaterialChange = 200;

registerOnClick("kitchen.bottom", function() {
  tweenCamera("Empty.Kitchen.Position", "Empty.Kitchen.Direction", 2);
  getJSFunction('showKitchen')();
}, function() {});

CabinetMaterialChange = 200;

registerOnClick("living.carpet", function() {
  tweenCamera("Empty.Living.Position", "Empty.Living.Direction", 2);
  getJSFunction('showLiving')();
}, function() {});

registerOnHover("dining.table", function() {
  outline("dining.table", "ENABLE");
}, function() {
  outline("dining.table", "DISABLE");
});

registerOnHover("living.cabinet.inner", function() {
  outline("living.cabinet.inner", "ENABLE");
}, function() {
  outline("living.cabinet.inner", "DISABLE");
});

ChairframeMaterials = ["wood.light", "wood.dark"];

CabinetMaterials = ["living.cabinet.light", "living.cabinet.dark"];

registerOnClick("dining.table", function() {
  tweenCamera("Empty.Dining.Position", "Empty.Dining.Direction", 2);
  getJSFunction('showDining')();
}, function() {});

CountertopMaterials = ["kitchen.countertop", "kitchen.countertop.001"];

registerOnClick("living.cabinet.inner", function() {
  tweenCamera("Empty.Cabinet.Position", "Empty.Cabinet.Direction", 2);
  getJSFunction('showLiving')();
}, function() {});

ChairseatMaterialChange = 400;

registerOnHover("living.cabinet.outter", function() {
  outline("living.cabinet.outter", "ENABLE");
}, function() {
  outline("living.cabinet.outter", "DISABLE");
});

CountertopMaterialChange = 200;

Cabinet2MaterialChange = 200;

FloorMaterialChange = 400;

registerOnClick("living.cabinet.outter", function() {
  tweenCamera("Empty.Cabinet.Position", "Empty.Cabinet.Direction", 2);
  getJSFunction('showLiving')();
}, function() {});

registerOnHover("floor", function() {
  outline("floor", "ENABLE");
}, function() {
  outline("floor", "DISABLE");
});

Chairseatmaterials = ["chair.seat.red", "chair.seat.blue", "chair.seat.creamy", "chair.seat.black", "chair.seat.green"];

Cabinet2Materials = ["living.cabinet.dark", "living.cabinet.light"];

registerOnClick("floor", function() {
  tweenCamera("Empty.Floor.Position", "Empty.Floor.Direction", 2);
  getJSFunction('showMisc')();
}, function() {});

CarpetMaterialChange = 200;

FloorMaterials = ["floor.stone", "floor.brown.light", "floor.brown", "floor.brown.dark"];

CarpetMaterials = ["living.carpet.red", "living.carpet.black"];

} // end of PL.init function

if (window.v3dApp) {
    // backwards compatibility for old player projects
    PL.legacyMode = true;
    PL.init(window.v3dApp);
}

})(); // end of closure

/* ================================ end of code ============================= */
